package test;

import java.util.concurrent.Semaphore;

public class LimitStringObject {
private final Semaphore semaphore;
private StringBuffer[] bufferArr;
private boolean[] bufferStatus;
public LimitStringObject()
{
	semaphore=new Semaphore(5);
	bufferArr=new StringBuffer[5];
	bufferStatus=new boolean[5];
	for(int i=0;i<bufferArr.length;i++)
	{
		bufferArr[i]=new StringBuffer();
		bufferStatus[i]=false;
	}
}

public StringBuffer acquireBufferObject() throws InterruptedException
{
	semaphore.acquire();
	StringBuffer tempBuffer=null;
	for(int i=0;i<bufferStatus.length;i++)
	{
		if(bufferStatus[i])
		{
			tempBuffer=bufferArr[i];
			bufferStatus[i]=false;
			break;
		}
	}
	return tempBuffer;
}



public void releaseBufferObject(StringBuffer obj)
{
	boolean releaseFlag=false;
	for(int i=0;i<bufferStatus.length;i++)
	{
		if(bufferArr[i].equals(obj))
		{
			bufferStatus[i]=true;
			releaseFlag=true;
			break;
		}
	}
	if(releaseFlag)
	{
		semaphore.release();
	}
}
}
